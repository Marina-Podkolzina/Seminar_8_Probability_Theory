#1 Даны значения величины заработной платы заемщиков банка (zp) 
#и значения их поведенческого кредитного скоринга (ks):
#ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]
#zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]
#Найдите ковариацию этих двух величин с помощью элементарных действий, 
#а затем с помощью функции cov из numpy

#Полученные значения должны быть равны.

#Найдите коэффициент корреляции Пирсона с помощью ковариации и 
#среднеквадратичных отклонений двух признаков, 
#а затем с использованием функций из библиотек numpy и pandas.




import numpy as np
import pandas as pd
import matplotlib.pyplot as plt



zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array( [401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

M_X = zp.mean() # находим мат. ожидание массива zp
M_Y = ks.mean() # находим мат. ожидание массива ks
M_XY = (zp * ks).mean() # находим их произведение 

cov_ks = M_XY - M_X * M_Y # вычисляем ковариацию = 9157.839999999997  
print(cov_ks)

np.cov(zp, ks, ddof = 0) # находим ковариацию с помощью функции cov из numpy
print(np.cov(zp, ks, ddof = 0))  

# обратим внимание: значения  равны 9157.839999999997 = [[ 3494.64  9157.84]
                                                        #[ 9157.84 30468.89]]


#Найдём коэффициент корреляции Пирсона,для этого сначала вычислим среднеквадратичное отклонение:

std_X = zp.std() # среднеквадратичное массива zp= 59.115480206118605 
std_Y = ks.std() # среднеквадратичное массива ks= 174.55340157098058
print(std_X , std_Y)

corr_ks = cov_ks / (std_X * std_Y) # находим коэффициент корреляции Пирсона = 0.8874900920739158
print(corr_ks)

np.corrcoef(zp, ks)# находим коэффициент корреляции Пирсона использованием функций из библиотеки numpy 
print(np.corrcoef(zp, ks)) # [[1.         0.88749009]
                           # [0.88749009 1.        ]]

df=pd.DataFrame(data={'zp':zp, 'ks':ks})# находим коэффициент корреляции Пирсона использованием функций из библиотеки pandas.

df.corr()
print (df, df.corr())

def main(zp, ks):
   
    plt.scatter(zp, ks)
    plt.show()
main(zp, ks)
                          
# Вывод: мы получили высокое значение корреляции 0.8874900920739158,
# значит присутствует линейная зависимость.